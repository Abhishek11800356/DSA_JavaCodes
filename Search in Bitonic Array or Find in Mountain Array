
import java.io.*;
import java.util.*;

public class Main {
    public static void main(String args[]) throws IOException {
        Scanner sc = new Scanner(System.in);
        
        // Input number of elements in the array
        int N = sc.nextInt();
        int arr[] = new int[N];
        
        // Input array elements
        for(int i = 0; i < N; i++)
            arr[i] = sc.nextInt();
        
        // Input target element
        int target = sc.nextInt();

        // Create an instance of Accio class
        Accio ob = new Accio();
        
        // Find the index of the target element in the array
        int ans = ob.findElement(arr, N, target);

        // Print the index of the target element
        System.out.println(ans);
    }
}

class Accio {
    // Function to perform binary search in ascending order
    static int findTargetInAscending(int arr[], int si, int ei, int target) {
        while (si <= ei) {
            int mid = (si + ei) / 2;
            if (arr[mid] == target) {
                return mid; // Return index if target found
            }
            if (arr[mid] > target) {
                ei = mid - 1; // Adjust end index
            } else {
                si = mid + 1; // Adjust start index
            }
        }
        return -1; // Return -1 if target not found
    }

    // Function to perform binary search in descending order
    public static int findTargetInDescending(int arr[], int si, int ei, int target) {
        while(si <= ei) {
            int mid = (si + ei) / 2;
            if (arr[mid] == target) {
                return mid; // Return index if target found
            } else if (arr[mid] < target) {
                ei = mid - 1; // Adjust end index
            } else {
                si = mid + 1; // Adjust start index
            }
        }
        return -1; // Return -1 if target not found
    }
    
    // Function to find the target element in the given array
    static int findElement(int arr[], int n, int target) {
        int si = 0; // Start index
        int ei = n - 1; // End index
        int peak = 0; // Variable to store the peak index
        
        // Find the peak element in the array
        while (si <= ei) {
            int mid = (si + ei) / 2;
            
            // Check if mid-1 and mid+1 are valid indices
            if(mid > 0 && mid < n - 1) {
                if (arr[mid - 1] < arr[mid] && arr[mid + 1] < arr[mid]) {
                    peak = mid; // Peak element found
                    break; // Exit the loop if peak is found
                }
            }
            
            if(arr[mid + 1] <= arr[mid]) {
                ei = mid - 1; // Adjust end index
            } else {
                si = mid + 1; // Adjust start index
            }
        }
        
        // Search in ascending part if target lies in that range
        if (arr[0] <= target && target < arr[peak]) {
            return findTargetInAscending(arr, 0, peak - 1, target);
        } else {
            // Search in descending part otherwise
            return findTargetInDescending(arr, peak, n - 1, target);
        }
    }
}



















////////////////////////////////////////////////////////////////// LEETCODE \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
/**
 * // This is MountainArray's API interface.
 * // You should not implement it, or speculate about its implementation
 * interface MountainArray {
 * public int get(int index) {}
 * public int length() {}
 * }
 */

class Solution {
    // Function to perform binary search in ascending order
    static int findTargetInAscending(MountainArray mountainArr, int si, int ei, int target) {
        while (si <= ei) {
            int mid = si + (ei - si) / 2;
            if (mountainArr.get(mid) == target) {
                return mid; // Return index if target found
            }
            if (mountainArr.get(mid) > target) {
                ei = mid - 1; // Adjust end index
            } else {
                si = mid + 1; // Adjust start index
            }
        }
        return -1; // Return -1 if target not found
    }

    // Function to perform binary search in descending order
    public static int findTargetInDescending(MountainArray mountainArr, int si, int ei, int target) {
        while (si <= ei) {
            int mid = si + (ei - si) / 2;
            if (mountainArr.get(mid) == target) {
                return mid; // Return index if target found
            } else if (mountainArr.get(mid) < target) {
                ei = mid - 1; // Adjust end index
            } else {
                si = mid + 1; // Adjust start index
            }
        }
        return -1; // Return -1 if target not found
    }

    // Function to find target in MountainArray
    public int findInMountainArray(int target, MountainArray mountainArr) {
        int n = mountainArr.length(); // Get length of MountainArray
        int si = 0; // Start index
        int ei = n - 1; // End index
        int peak = 0; // Variable to store the peak index
        
        // Find the peak element in the MountainArray
        while (si <= ei) {
            int mid = si + (ei - si) / 2;
            if (mid == 0 || mountainArr.get(mid - 1) < mountainArr.get(mid)) {
                if (mid == n - 1 || mountainArr.get(mid) > mountainArr.get(mid + 1)) {
                    peak = mid; // Peak element found
                    break;
                } else {
                    si = mid + 1;
                }
            } else {
                ei = mid - 1;
            }
        }

        // Search for target in the ascending part of the MountainArray
        int left = findTargetInAscending(mountainArr, 0, peak, target);
        if (left != -1) {
            return left; // If found in ascending part, return index
        }
        
        // If not found in ascending part, search in descending part
        int right = findTargetInDescending(mountainArr, peak, n - 1, target);
        return right; // Return index if found, otherwise return -1
    }
}
