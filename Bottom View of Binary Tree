
import java.util.LinkedList; 
import java.util.Queue; 
import java.io.*;
import java.util.*;

class Node{
    int data;
    Node left;
    Node right;
    Node(int data){
        this.data = data;
        left=null;
        right=null;
    }
}


class Main {
    static Node buildTree(String str){
        if(str.length()==0 || str.charAt(0)=='N'){
            return null;
        }
        String ip[] = str.split(" ");
        Node root = new Node(Integer.parseInt(ip[0]));
        Queue<Node> queue = new LinkedList<>(); 
        queue.add(root);
        int i = 1;
        while(queue.size()>0 && i < ip.length) {
            Node currNode = queue.peek();
            queue.remove();
            String currVal = ip[i];
            if(!currVal.equals("N")) {
                currNode.left = new Node(Integer.parseInt(currVal));
                queue.add(currNode.left);
            }
            i++;
            if(i >= ip.length)
                break;   
            currVal = ip[i];
            if(!currVal.equals("N")) {
                currNode.right = new Node(Integer.parseInt(currVal));
                queue.add(currNode.right);
            }
            i++;
        }
        return root;
    }
    void inOrder(Node node) {
        if (node == null) {
            return;
        }
        inOrder(node.left);
        System.out.print(node.data + " ");
        inOrder(node.right);
    }
    
	public static void main (String[] args) throws IOException{
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		int t=Integer.parseInt(br.readLine());
		while(t-- > 0){
			String s = br.readLine();
			Node root = buildTree(s);
			Solution tree = new Solution();
			ArrayList<Integer> ans = tree.bottomView(root);

            for(Integer num:ans)
            System.out.print(num+" ");

            System.out.println();
		}
	}
}
  


class Solution{

    // Approach -> sabse pehle Vertical Order Traversal perform karenge aur ek hashmap mein vl ko key bana ke values 
    // update krte jayenge jo last updated value hoga vhi mera Bottom view hoga.
    
    int leftMostPos = 0;
    int rightMostPos = 0;

    // Is method se hme leftmostPos and RightMostPos mil jayenge
    public void getSpan(Node root,int pos)
    {
        if(root==null)
            return;

        leftMostPos = Math.min(leftMostPos,pos);
        rightMostPos = Math.max(rightMostPos,pos);

        getSpan(root.left,pos-1);
        getSpan(root.right,pos+1);   
    }

    class pair{
        Node node;
        int vL_or_hD;

        pair(Node node,int vL_or_hD)
        {
            this.node = node;
            this.vL_or_hD = vL_or_hD;
        }
    }

    
    public ArrayList<Integer> bottomView(Node root)
    {
        ArrayList<Integer>bottomView = new ArrayList<>();
        if(root==null)
            return bottomView;
        
        int noOfLvls = rightMostPos-leftMostPos +1;
        int rootPos = -(leftMostPos);

        //ab bs LOrdrTrvsl kar denge queue bana ke aur ek hasmap mein values store krvate jayenge

        Queue<pair> que = new ArrayDeque<>();
        que.add(new pair(root,rootPos));

        // Treemap to store updated values against vL.
        Map<Integer,Integer> map = new TreeMap<>();

        while(!que.isEmpty())
            {
                pair rpair = que.remove();
                map.put(rpair.vL_or_hD,rpair.node.data);

                if(rpair.node.left!=null)
                {
                    que.add(new pair(rpair.node.left,rpair.vL_or_hD-1));
                }

                if(rpair.node.right!=null)
                {
                    que.add(new pair(rpair.node.right,rpair.vL_or_hD+1));
                }
            }
             // Now i just neew to insert the Values of Treemap into the Arraylist
                for(int value:map.keySet())
                    {
                        bottomView.add(map.get(value));
                    }
        return bottomView;
                      
    }
}
